<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="catalog_script_client">
    <catalog_script_client action="INSERT_OR_UPDATE">
        <active>true</active>
        <applies_catalog>true</applies_catalog>
        <applies_extended>false</applies_extended>
        <applies_req_item>false</applies_req_item>
        <applies_sc_task>false</applies_sc_task>
        <applies_target_record>false</applies_target_record>
        <applies_to>item</applies_to>
        <cat_item display_value="ServiceNow - Automated Deployment">a677166ddbc30c5056cf2bce85961954</cat_item>
        <cat_variable/>
        <condition/>
        <description/>
        <field/>
        <global>true</global>
        <isolate_script>true</isolate_script>
        <messages/>
        <name>ServiceGuru - On Submit validation</name>
        <order/>
        <script><![CDATA[function onSubmit() {
    //Type appropriate comment here, and begin script below
    g_form.clearMessages();

    changeRequired();
    var before_is_empty_bool = false;
    var after_is_empty_bool = false;
    var component_value_before = '',
        component_value_after = '';

    try {
        component_value_before = g_form.getValue('service_guru_update_set_before').toString();
        if (component_value_before == '[]') {
            before_is_empty_bool = true;
        }
        if (component_value_before == '') {
            before_is_empty_bool = true;
        }
    } catch (e) {
        before_is_empty_bool = true;
    }
    try {
        component_value_after = g_form.getValue('service_guru_update_set').toString();
        if (component_value_after == '[]') {
            after_is_empty_bool = true;
        }
        if (component_value_after == '') {
            after_is_empty_bool = true;
        }
    } catch (e) {
        after_is_empty_bool = true;
    }
    try {
        if (after_is_empty_bool) {
            alert(getMessage('No Update Set/Script Entry found.'));
            return false;
        }
        if (!before_is_empty_bool) {
            component_value_before = JSON.parse(component_value_before);
        }
        if (component_value_after.trim() == '') {
            alert(getMessage('No Update Set/Script Entry found.'));
            return false;
        }
        component_value_after = JSON.parse(component_value_after);

        var us_arr = '',
            order_arr = '';

        var change_bool = true;

        for (var count = 0; count < component_value_after.length; count++) {
            order_arr += ',,,' + component_value_after[count].order;

            if (component_value_after[count].us_name != undefined && component_value_after[count].us_name != null && component_value_after[count].us_name != '') {
                us_arr += ',,,' + component_value_after[count].us_name;
            }
            if (component_value_after[count].change_detected == 'Yes') {
                change_bool = false;
            }
        }
        order_arr = order_arr.split(',,,');

        if (validateUSDuplicacy(order_arr) != '') {
            alert(getMessage('Duplicate order found: ' + validateUSDuplicacy(order_arr)));
            return false;
        }

        if (change_bool) {
            if (!before_is_empty_bool) {
                if (component_value_after.length == component_value_before.length) { //no deletions found
                    alert(getMessage('No Update Set or Script change detected. Please change an entry and submit again.'));
                    return false;
                }
            }
        }
        if (us_arr != '') {
            us_arr = us_arr.split(',,,');
        }
        if (validateUSDuplicacy(us_arr) != '') {
            g_form.addErrorMessage(getMessage('Duplicate update set found: ' + validateUSDuplicacy(us_arr)));
            return false;
        }
        var all_env = [];
        all_env.push(g_form.getValue('dev_environment').toString());
        all_env.push(g_form.getValue('qa_environment').toString());
        all_env.push(g_form.getValue('uat_environment').toString());
        all_env.push(g_form.getValue('intermediate_instance_1').toString());
        all_env.push(g_form.getValue('intermediate_instance_2').toString());
        all_env.push(g_form.getValue('intermediate_instance_3').toString());
        all_env.push(g_form.getValue('intermediate_instance_4').toString());
        all_env.push(g_form.getValue('intermediate_instance_5').toString());
        all_env.push(g_form.getValue('intermediate_instance_6').toString());
        all_env.push(g_form.getValue('intermediate_instance_7').toString());
        all_env.push(g_form.getValue('intermediate_instance_8').toString());
        all_env.push(g_form.getValue('intermediate_instance_9').toString());
        all_env.push(g_form.getValue('intermediate_instance_10').toString());
        all_env.push(g_form.getValue('intermediate_instance_11').toString());
        all_env.push(g_form.getValue('intermediate_instance_12').toString());
        all_env.push(g_form.getValue('intermediate_instance_13').toString());
        all_env.push(g_form.getValue('intermediate_instance_14').toString());
        all_env.push(g_form.getValue('intermediate_instance_15').toString());
        all_env.push(g_form.getValue('intermediate_instance_16').toString());
        all_env.push(g_form.getValue('intermediate_instance_17').toString());
        all_env.push(g_form.getValue('intermediate_instance_18').toString());
        all_env.push(g_form.getValue('intermediate_instance_19').toString());

        if (checkForDuplicates54524(all_env)) {
            return false;
        }

        if (g_form.getValue('dev_environment') == '') {
            alert(getMessage('Dev environment should not be empty as it acts as the source for all update sets.'));
            return false;
        }
        if (invalidDestinationEnvironment()) {
            return false;
        }


        if (g_form.getValue('qa_environment') == '') {
            if (!confirm('QA Environment is not defined. This means all the components will be directly committed from "' + g_form.getValue('dev_environment') + '" to the production environment defined in the system property "x_7756_update_set.service_guru_production_instance".\n\n Click "Cancel" if you wish to abort.')) {
                return false;
            }
        }
        if (validateForDuplicateFunctions(component_value_after) != '') {
            if (!confirm('Duplicate function name "' + validateForDuplicateFunctions(component_value_after) + '" found in the scripts. This will cause some of the functions to be not executed. Use unique function names.\n\n Click "Cancel" if you wish to abort.')) {
                return false;
            }
        }
    } catch (e) {
        alert('On Submit script error:' + e);
    }
}

function validateForDuplicateFunctions(component_value_after) {
    try {
        var scr = '',
            arr = [],
            count2;

        for (var count = 0; count < component_value_after.length; count++) {
            if (component_value_after[count].script_mvrs != undefined && component_value_after[count].script_mvrs != null && component_value_after[count].script_mvrs != '') {
                scr = component_value_after[count].script_mvrs;
                scr = scr.toString();
                scr = scr.substring(scr.indexOf('function') + 8);
                scr = scr.substring(0, scr.indexOf('('));
                scr = scr.trim();

                for (count2 = 0; count2 < arr.length; count2++) {
                    if (scr == arr[count2]) {
                        return scr;
                    }
                }
                arr.push(scr);
            }
        }
        return '';
    } catch (e) {
        alert('error in on submit cs: function validateForDuplicateFunctions:' + e);
    }
}

function changeRequired() {
    try {
        g_form.setMandatory('change_request', false);
        g_form.hideFieldMsg('change_request');

        var production = g_form.getValue('production').toString();
        var dev_environment = g_form.getValue('dev_environment').toString();
        var qa_environment = g_form.getValue('qa_environment').toString();
        var destination_environment = g_form.getValue('destination_environment').toString();
        var check_change_ticket_mode = g_form.getValue('valid_change_required').toString().toLowerCase();

        if (check_change_ticket_mode == 'none') {
            g_form.setMandatory('change_request', false);
            g_form.clearValue('change_request');
            g_form.showFieldMsg('change_request', 'Change ticket is not Required for any deployments.', 'info', true);
        } else if (check_change_ticket_mode == 'production only') {
            if (production == destination_environment) {
                g_form.setMandatory('change_request', true);
                g_form.showFieldMsg('change_request', 'Change ticket is required for Production environment deployments.', 'info', true);
            } else {
                g_form.setMandatory('change_request', false);
                g_form.clearValue('change_request');
                g_form.showFieldMsg('change_request', 'Change ticket is not Required for non production deployments.', 'info', true);
            }
        } else if (check_change_ticket_mode == 'all environments except qa/dev') {
            if (dev_environment == destination_environment) {
                //dev environment does not need change
                g_form.setMandatory('change_request', false);
                g_form.clearValue('change_request');
                g_form.showFieldMsg('change_request', 'Change ticket is not required for development environment deployments.', 'info', true);
            } else if (qa_environment == destination_environment) {
                g_form.setMandatory('change_request', false);
                g_form.clearValue('change_request');
                g_form.showFieldMsg('change_request', 'Change ticket is not required for QA environment deployments.', 'info', true);
            } else {
                g_form.setMandatory('change_request', true);
                g_form.showFieldMsg('change_request', 'Change ticket is required for all environment deployments except Dev/QA deployments.', 'info', true);

            }
        } else if (check_change_ticket_mode == 'all environments except dev') {
            if (dev_environment == destination_environment) {
                //dev environment does not need change
                g_form.setMandatory('change_request', false);
                g_form.clearValue('change_request');
                g_form.showFieldMsg('change_request', 'Change ticket is not required for development environment deployments.', 'info', true);
            } else {
                g_form.setMandatory('change_request', true);
                g_form.showFieldMsg('change_request', 'Change ticket is required for all environment deployments except Dev deployments.', 'info', true);

            }
        }
    } catch (e) {
        alert('error in on submit cs: function changeRequired:' + e);
    }
}

function invalidDestinationEnvironment() {
    try {
        var destination_environment = g_form.getValue('destination_environment');
        var all_env = [];
        all_env.push(g_form.getValue('dev_environment').toString());
        all_env.push(g_form.getValue('qa_environment').toString());
        all_env.push(g_form.getValue('uat_environment').toString());
        all_env.push(g_form.getValue('intermediate_instance_1').toString());
        all_env.push(g_form.getValue('intermediate_instance_2').toString());
        all_env.push(g_form.getValue('intermediate_instance_3').toString());
        all_env.push(g_form.getValue('intermediate_instance_4').toString());
        all_env.push(g_form.getValue('intermediate_instance_5').toString());
        all_env.push(g_form.getValue('intermediate_instance_6').toString());
        all_env.push(g_form.getValue('intermediate_instance_7').toString());
        all_env.push(g_form.getValue('intermediate_instance_8').toString());
        all_env.push(g_form.getValue('intermediate_instance_9').toString());
        all_env.push(g_form.getValue('intermediate_instance_10').toString());
        all_env.push(g_form.getValue('intermediate_instance_11').toString());
        all_env.push(g_form.getValue('intermediate_instance_12').toString());
        all_env.push(g_form.getValue('intermediate_instance_13').toString());
        all_env.push(g_form.getValue('intermediate_instance_14').toString());
        all_env.push(g_form.getValue('intermediate_instance_15').toString());
        all_env.push(g_form.getValue('intermediate_instance_16').toString());
        all_env.push(g_form.getValue('intermediate_instance_17').toString());
        all_env.push(g_form.getValue('intermediate_instance_18').toString());
        all_env.push(g_form.getValue('intermediate_instance_19').toString());
        all_env.push(g_form.getValue('production').toString());

        var envNonBlank = '';
        for (var i = 0; i < all_env.length; i++) {
            if (all_env[i] != '' && all_env[i] != g_form.getValue('dev_environment').toString()) {
                envNonBlank += ', ' + all_env[i];
            }
            if (all_env[i] == destination_environment) {
                return false;
            }

        }
        g_form.clearValue('destination_environment');
        alert('Destination environment must be among one of the selected environments: ' + envNonBlank.substring(2));
        return true;
    } catch (e) {
        alert('error in on submit cs: function invalidDestinationEnvironment:' + e);
    }
}

function validateUSDuplicacy(us) {
    try {
        for (var i = 0; i < us.length; i++) {
            for (var j = 0; j < us.length; j++) {
                if (i != j && us[i] == us[j]) {
                    return us[i];
                }
            }
        }
        return '';
    } catch (e) {
        alert('error in on submit cs: function validateUSDuplicacy:' + e);
    }
}

function checkForDuplicates54524(env) {
    try {
        for (var i = 0; i < env.length; i++) {
            for (var j = 0; j < env.length; j++) {
                if (i != j && env[i] == env[j] && env[i] != '' && env[j] != '') {
                    g_form.addErrorMessage(getMessage('Duplicate environment selection found for ' + env[i]));
                    return true;
                }
            }
        }
        return false;

    } catch (e) {
        alert('error in on submit cs: function checkForDuplicates54524:' + e);
        return true;
    }
}]]></script>
        <sys_class_name>catalog_script_client</sys_class_name>
        <sys_created_by>sxchalub</sys_created_by>
        <sys_created_on>2020-02-18 16:59:33</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>9f7792addbc30c5056cf2bce8596196f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ServiceGuru - On Submit validation</sys_name>
        <sys_overrides/>
        <sys_package display_value="Auto Deployment - ServiceGuru" source="x_7756_update_set">870d48164fb00810ff6ab8de9310c78e</sys_package>
        <sys_policy/>
        <sys_scope display_value="Auto Deployment - ServiceGuru">870d48164fb00810ff6ab8de9310c78e</sys_scope>
        <sys_update_name>catalog_script_client_9f7792addbc30c5056cf2bce8596196f</sys_update_name>
        <sys_updated_by>sxchalub</sys_updated_by>
        <sys_updated_on>2020-02-18 16:59:33</sys_updated_on>
        <table/>
        <type>onSubmit</type>
        <ui_type>10</ui_type>
        <variable_set/>
        <view/>
    </catalog_script_client>
</record_update>
